package qwr;


import qwr.config.AreaZon;
import qwr.config.Room;
import qwr.config.VSensor;
import qwr.visual.BackGround;

public class Main {
    public static Loger u= Loger.init();
    public static void main(String[] args) {
		AreaZon.init();
		Room.init();
		VSensor.init();
    	Menu.consol();
//	    Dialog.consol();
    }//main -----------------------------------------------------------------------
}//class Main ======================================================================
/*
1) ЦЕЛЬ: Создание САПРа управления охранно-пожарной сигнализацией для интеграции технических систем различных производителей.
Взаимная интеграция пожарной и охранной сигнализации.
2) БИЗНЕЕС-ЦЕЛЬ: Снижение количества вызовов (тревог) по ложным срабатываниям систем. Снижение количества датчиков
охранной и пожарных систем за счет их двойного использования.
3) ГЛОБАЛЬНАЯ ЗАДАЧА:
Система состоит из следующих комплексов: администратора, оператора, визуализации, опроса датчиков и команд управления
Комплексы имеют следующую функциональность:
1. Конфигурирование системы (только АРМ администратора)
1.1 Конфигурирование датчиков
1.1.1 Конфигурирование типов датчиков (общие параметры)
1.1.2 Конфигурирование уставок отдельных датчиков с привязкой к месту
1.1.3 Привязка зон к датчикам
1.1.4 Привязка действий к датчикам
1.1.5 Привязка визуализации к датчикам
1.2 Конфигурирование зон
1.2.1 Конфигурирование типов зон
1.2.2 Установка отдельных зон с привязкой к месту
1.2.3 Привязка датчиков к зонам
1.2.4 Привязка действий к зонам
1.2.5 Привязка визуализации к зонам
1.3 Конфигурирование действий
1.3.1 Конфигурирование типов исполнительных устройств
1.3.2 Привязка исполнительных устройств к месту и оборудованию
1.3.3 Привязка к датчикам исполнительных устройств
1.3.3.Привязка к зонам исполнительных устройств
1.3.4.Привязка к визуализации исполнительных устройств
1.4 Чтение из файла
1.4.1 Повторное Чтение текущего файла проекта
1.4.2 Чтение нового файла проекта
1.4.3 Сравнение нового файла проекта с текущем
1.5 Запись в файл
1.5.1 Сохранение текущей конфигурации
1.5.2 Сохранение конфигурации в новый файл проекта
1.5.3 Создание нового файла проекта
1.5.4 Сохранение копии конфигурации проекта
1.6 Запись в аппаратный комплекс
1.7 Чтение из аппаратного комплекса
1.8 Конфигурирование визуализации
1.8.1 Конфигурирование экранов визуализации
1.8.2 Создание планов объектов
1.8.3 Наложение датчиков на планы объектов
1.8.4 Наложение зон на планы объектов
1.8.5 Наложение исполнительных устройств на планы объектов
1.8.6 Привязка планов к экранам
1.8.7 Конфигурирование действий тревожного монитора
2. Визуализация событий
2.1 Визуализация на общем плане  (АРМ администратора, визуализации)
2.2 Визуализация на тревожном мониторе  (АРМ администратора, визуализации)
2.3 Переключение мониторов (АРМ оператора, администратора)
3. Протоколирование событий
3.1 Показ текущего списка событий (АРМ оператора, администратора)
3.2 Показ архива событий (АРМ оператора, администратора)
3.3 Установка параметров архивирования событий (только АРМ администратора)
3.4 Установка фильтров событий (АРМ оператора, администратора)
3.5 Сохранение в текстовом файле списка событий за определенный промежуток времени
4. Анализ протокола событий по ложным срабатывания (АРМ администратора)
4.1 Построение графиков событий
4.2 Построение фильтров графиков событий
4.3 Наложение на графики событий внешних факторов, временных вех.
5. Действия по событиям и по командам оператора
5.1 Установка прав оператора на отдачу команд (АРМ администратора)
5.2 Отработка команд оператора (АРМ управления)
5.3 Установка автоматизации команд по событиям (АРМ администратора)
5.4 Квитирование событий (АРМ оператора, администратора)
5.5 Квитирование команд автоматизации (АРМ оператора, администратора)
5.6 Установка параметров "жизни" оператора (АРМ администратора)
5.7 Квитирование "жизни" оператора. (АРМ оператора, администратора)

Каждый АРМ имеет следующие программные модули:
а) обработку команд с клавиатуры
б) блок вывода на экран
в) блок записи протокола (возможно отдельный поток)
г) функциональный блок в отдельном потоке
д) вывод HELP (отдельный экран, браузер)
 */
enum TypeSensor{

}//TypeSensor

abstract class Actions{

}
abstract class Drive{

}//class Drive

class Rele extends Drive{

}//class Rele

class Castle extends Drive{//замок

}//class Castle

class Gateway extends Castle{//шлюз

}//class Gateway


class SensorBelt{//Привязка зон к датчикам

}
class SensorActions{//Привязка действий к датчикам

}

class Belt extends Placement {//зона

}
class BeltActions{//Привязка действий к зонам

}
class BeltCastle{//Привязка дверей к зонам

}
class BeltGateway{//Привязка шлюзов к зонам

}

class VSensorBackGround extends BackGround {//визуализация места датчиков

}
class LocationBackGround extends BackGround {//визуализация архитектуры

}
class CastleBackGround extends BackGround {//визуализация работы проходов, дверей

}

class GatewayBackGround extends BackGround {//визуализация работы шлюзов

}
abstract class Event{//событие

}

class Logging extends Event{//Протоколирование событий

}

class VScreen{

}
class Monitor{

}